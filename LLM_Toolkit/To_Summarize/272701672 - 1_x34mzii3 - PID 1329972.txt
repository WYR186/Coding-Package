It's two o'clock. You will do. No, it's fine. Slides are okay or you want us to cut the lights a little bit? Seem okay. Alright, Welcome. Wow, I'm really loud. It's called gain. Not shouting. Sorry. I'm used to the back having a jackhammer and I speak and everyone can still hear me and I don't have a mike. Alright. So welcome to ECE threonine one, I'm sure you've heard lots of things. Hopefully you're excited instead of petrified. This is my friend here, professor called b2c is the beginning of my Polish accent is not good, but he forgives me usually. He has all these cool degrees from places in Eastern Europe, Plaka, Poland, and Yugoslavia. In Bulgaria. He does a lot of work in high-performance, fault tolerant computing reliability, security, does all kinds of cool stuff. Teaches a number of our classes. Most importantly, he teaches 391 regularly, but there's also a graduate class and fault tolerant computing. So he and I will be sharing in the class together. Is that a question back there? You're just saying hi to your friend. Okay. The latter. Sorry. I thought it was a little early. This is me up on the right. I did all my work at Berkeley much more boring in comparison. And then, then came here in 98, I have done all kinds of different research, networks, processor design accelerators. Gpu is high-performance computing education. And then I designed a few of the sea cork copy and most of the core classes which you might have used some of my materials or watched my videos or things like that. And your new best friends. So we are fortunate to have six outstanding grad students. He doesn't really look like tux, but he didn't send us a photo. This is what happens when you don't send me a photo. You look like talks Suddenly. We've also got 38, of course, assistance undergrads. All of these people have done well in this class and can help you. So literally we have almost one staff member for every five of you. So there's plenty of help. So please avail yourselves of it and recognize your TAs because it really probably will be your best friend in the coming months. Okay. Alright, so what is this class? So you remember this picture hopefully from your favorite book in the world, Patt and Patel and maybe the slide from one, twenty, two, twenty. And this is the digital system attraction layers, right? So you've learned all this stuff and maybe you've even done this 374 stuff already for some of you. Where's 391 was sort of in here in-between language and ISA, we're going to talk about system software. Okay? So the first thing I wanna do is talk about, well, what do I want you to take away from the class? Alright, so we're gonna be together for a bunch of months. You're going to spend a lot of time on the class. I'll tell you why a little later. Whatever I want you to learn. So start with the knowledge objectives. I want you to understand how hardware and software interact. What is an interface look like? How does it work in detail? Alright, so when you go off in industry, you're going to be the people that, that people turn to when they say, How do I get this working in reality in detail on this new system? So most, I don't know if it's really true. Most, but they know so many alarms from U of I have gone off to the Microsoft kernel team. I think most of it must be populated by Hawaiian. I now I think we should start just calling it a line x instead of windows, okay? Alright. I also want you to understand how you build those abstractions that you've gotten used to in say two twenty and two twenty five. Alright, so how do you build the abstraction of software that you'd like to use in your APIs you'd like to use when you're coding on top of hardware that doesn't really look anything like that. So getting into a lot more detail, but that's the second knowledge objective. So there are three key roles for that system software, what we'll call the operating system. So the first is virtualization. So it's the idea that even though you've got maybe some chunk of memory, maybe four gigabytes or eight gigabytes right there. Those of you who have big gaming machines, we've got 32 gigabytes or even more. They have a machine in my lab with a terabyte for doing genomics. But no matter what you have, you'd like the illusion for your program that that's limitless. You've got more memory than you really have. It's an illusion. That's what we call virtualization. Second key concept, abstraction. So again, simpler, more usable interfaces than the hardware provides to you. How do you build those on top of the hardware so that the software can take advantage of them. Then the last key concept inside an OS, what the OS is doing for you is protection. So if you run two programs, you expect that those two programs can't hurt each other, right? Or that if you're working on a computer and someone else logs into the same computer, their programs can't somehow affect your programs. So that's called protection. So these are the things we'll be focusing on throughout the semester. There's also a lot of skills that we hope you will pick up in 391. So actually let me start. Let me first say, well wait a minute. Why are we going to study operating systems in order to learn these things? So operating systems are the epitome of software, okay, So any idea anyone ever had and software, someone said, Oh, I bet I could put that just right into the operating system. And they did often is not a good idea, but they did. Okay. So operating systems are the epitome of all software. And increasingly, there's more and more abstraction available in real systems. When we started the class, believe it or not, phones did not have operating systems. I mean, in your lifetime, has anyone ever used a phone that didn't have an operating system? Okay. So a few of, you know, phones that operating systems back then, it maybe not quite true. There might have been some of the palm systems that had preliminary versions of OSs. Today your watch probably has an OS. This is actually an article from 2012, but this was a research article, but somewhat seriously, 34 years from now, your shoe may have a processor that runs some embedded version of Linux so it can keep track of your health status for you. Let's not unrealistic. So operating systems are everywhere. So we want you as ECE Illinois students to understand well, what do they do? How do they work? How do you build them? What do they provide? Alright, so skills, tools, you need to know how to use tools. Tools make you happy. Life can be really hard when you don't use tools. So we will try to get you to use tools, all kinds of tools. There are many tools we don't require to use, require you to use in this class that you should use anyway. A lot of the good lab extensions that allow you to do things like continuous integration and tracking and bug bug reporting and things like that. Strongly recommend you take advantage of them. There's a limit to how much we can add in and you got to learn another tool in another tool in another tool. That's why they're not required. But we do encourage you to use as many. She can't. You do have to learn how to use source control. You've used it already in one-to-two 20th think compilers, dependency management like makefiles, debuggers, and so forth. Some of you have probably gotten through your classes so far without really using a debugger. If you try to do that in 391, you will suffer for it. So please don't use the debugger. Please do use the debugger, right? Don't make yourself suffer. The third big set of skills that we're hoping you'll pick up in 391 is how to do team projects. You may have this already if you've been active in R. So with team projects, maybe you know how to work with a team. That's great. Not all of your peers will. That's okay. This is where we want you to learn. You're going to have a team for half of the semester where you design and build your own operating system with a team of four people. First half of the semester you're gonna be building up more individual skills. Mostly have some group work throughout the semester. Starting next week. You're going to learn to communicate with your teammates, leverage individual's strengths. Not everyone's gonna be equally good at everything. So part of having an effective team, figuring out who's good at what, working together, separating up the tasks so that the people who are good at, who are best at those tasks do those tasks while other tasks are handled by people who are better at those tasks. So there's a lot of teamwork that happens in order to make a group effective. So that's one of the things we're hoping you'll take away. Also as a team thinking about not only how do you make things work, but how do you test them. Software that's never been tested. It doesn't actually work no matter how much you think you got it right. And maybe dabbled a little with running. It doesn't work until you've thoroughly tested it. Okay? Alright, Then the last thing that in earlier classes we do a lot of hand-holding. We say, look, here's the material, here's the problems we'd like you to solve. Here's where you can read about it. We're going to start doing less of that deliberately. And 391, we want you to learn how to read specks, read documentation to find what you need to know. When you're out in the real-world would cut some quotes coming up. On the real-world. There's no one to help you, okay, It's on you to go out and figure things out on your own. So we'll try to help you learn how to do that gradually over the semester. Early in the semester we'll give you the spec, but then it will tell you everything you need to know. You should still go look at the spec so you can see what you would have had to do in order to get the information we gave you. Reading code. We're gonna give you a program that probably most of you think, wow, it's so big. How can he ever possibly read it? In fact, it's, sorry, it's a toy. It's about 5 thousand lines of code. So that's a toy code. Now as a student, it's probably sounds big for most of you, but GDB, GCC, the things I worked on in grad school, it's a million lines of code. What we're hoping you get is the skill to say, well, what do I need to read and how do I find the things I need to read so that I can develop enough understanding of the system so that I can modify it. Okay, So you'll read 5 thousand lines of code. Hopefully you won't read all of it. You'll figure out what you need to know, right? About 500 more. One of the projects. Okay. Alright. So a little bit of history. So 391 was developed 18 years ago, fall 2004. My t-shirt is getting too small. It's been shrinking. This is a t-shirt my class made. They didn't make it for me because there's bar crawl. They didn't invite me to the bar crawl. When they were done, they were happy. But there's a lot of bar crawl stuff in quotes on the back. But we got together with a computer engineering faculty. So what are we missing in our curriculum? We made a big list. A lot of the stuff I've already told you about the knowledge and skills. Because I've yeah, that's two classes of material. And we got one semester course to put it into cram. And they said, Okay, get to it. Steve said, Okay, we'll do this is meant to be your main class. Okay? We know it's hard, we know there's a lot to learn. This is meant to be your main class this semester. It's been that way for 18 years literally. Please don't take it unless you really know. This is so easy for me. Oh my goodness, It's amazing. I don't understand why everyone else struggles. If that's you, go do what you want. Sure, whatever. But please unless you unless that's your feeling right now. Don't take it with 374, 3d5 or 411, or for 45 unless you absolutely have to and really recommend strongly, you think about not doing it that way, or at least keep your options open so you can drop something. Okay. In fact, in at least two of these classes, 391411445 as well, actually, we've got competitions, actually three to five as a competition now, right? So if you wanna be the best amongst your peers, you can compete. And that's essentially infinite time because some of you are really, really competitive. I assure you, my staff team and for 11 thousand hours across three people over a semester. So very competitive. I didn't do that. They did that is just for fun. You get, you get some prizes. Or as competition sponsored from Microsoft, you don't have to do it. It's, it's, it's not required to get a good grade. But if you're, if you're interested in competing, we do have a competition. I'll come back to that again later. So what should you already know? And I know this might come as a little bit of a shock because we're trying to figure out how to make the transition easier. And three menu one was designed assuming that the previous, previous classes would not change and maybe they've changed. I know you're allowed to have partners now into 20, okay, but we expect that you know how to write C code. So you've probably written a bunch of programs. It's consisting of a few 100 lines. We also assume that you know how to write assembly code. So when I teach, my students write a median of about 700 lines of LC3. I don t think actually I've looked at the numbers. If into 20, you wrote what usually happens in a lot of the other sections, about three hundred, three hundred and fifty lines. That's fine. If you were a partner where the partner did all the work and you nodded and smiled and said, Yeah, that looks good, then you're going to struggle. So if you've got more to learn, so before you're ready for the first MP, well, the second NPV count 0 as the first. Alright, we will also use some basic data structures. We'll talk about a lot about the Linux kernel as a case study, and I'll show you code from the kernel. You have a copy of that code and go read it and understand it. And their data structures used, of course, and they OS. If you've seen those data structures before, you'll probably find that easier to follow when we talk about those things. So if you've taken CS2 25, our class will be easier. It's not a requirement, but we encourage you to take it first. All right. Any questions yet? Okay. Alright. So here's a big picture. So we're going to start off, I'm shifting gears from LC3, which you know and love, I hope you love it. Into X86. Write a commercial architecture ISA that's used in laptops, servers, desktops, etc. So we're going to introduce you to a risk subset in the next three lectures of X86, specifically the 32-bit version i32. Okay? And we'll spend a couple of weeks on that. Then we're going to say how to, how does the processor actually interact with all of these devices? So disk drives, keyboard, monitor, mouse, and network, for example. An interaction between the processor and the rest of the world. How does it really work? We touch on that briefly in to 20, but we're going to spend actually 4.5 weeks talking about that, roughly 4.5 weeks talking about that in our class, we'll go into a lot more detail talking about synchronization deal with the asynchronous nature of these devices relative to the processor, how do they actually interact in a way that's productive and useful? Then we're going to dip briefly into virtualization couple of weeks on how we virtualize memory. How we take a finite resource like memory and make it appear as though it were infinite. For our programs. We're going to come back for practical reasons to the design of file systems. I say practical because around this time you'll be starting your OS design. And we will give you an in-memory file system. And your code will have to take that data structure and make use of it as if it were an on-disk file system. Will tell you how those things work in about a week. Then we will go on for more virtualization, specifically virtualization of the processor. So even though you might have one processor, do you make it seem that ten different programs each have their own, their own system to run on. Because that's what it looks like when you write a C code, for example, of our Python code, it looks like every program you run has its own computer. Of course that's not true. There's one computer and maybe even one processor. Rarely, rarely one processor these days, but how is that done? How does add virtualization work? So we'll spend a week and a half, maybe two weeks on that. Then we'll talk about something called signals. These are user-level interrupts. In many real systems, we want to break that abstraction boundary of synchronous behavior that we leveraged often in classes like to 20, say, okay, let the user type their name. The program stops and waits until the user is done and presses enter. The program doesn't do anything, it just waits it. So it's actually sitting inside the OS waiting for the keyboard driver to say, here's a line of what the user has typed on the keyboard as an ascii string. So you don't always want that behavior. Sometimes you're playing a game, you want the keystrokes. So user-level interrupt signals are used for those kind of things. For example, we'll talk about that near the end of the class. And then the last thing we'll do is talk about how we build the abstraction between the rod device behavior and what you see in C libraries written really with the OS in-between. Okay, So how do you build that up? So we'll go through a device driver design. And that's partly because you're not actually going to use that in your labs. So it should be fun. It's last, you won't really do it, but you could if you wanted to. And that's it, then we're done. I was easier. It Good. Any questions? Alright. Anyone know this person? Not popular anymore? Monty Python. Some quotes. I'll just read you the highlighted parts. We asked some of our lungs to tell us what they thought was most useful, about 391. And then as you'll see, the person who invited them to do so made the mistake of saying whatever they gave themselves as a name we would put on the slide. So you'll see that in a couple of slides. So Eric Clark, fundamental ideas taught in lecture hours, reading dense type, some cool documentation like the until manual made it easy to learn quickly when you need to learn new things. And remember, as an engineer, you're gonna be learning for the rest of your life, right? What's out there for you is technical documentation. When you want to learn something new, you go read it. That's how you learn. And then you play with it. You build stuff with it. In order to do that. How do you get good at it and you do it, right? And you get experienced with it, it becomes much, much easier. So you're going to start to do that in class. Next quote. In my professional career, I found that my time, this was by the way, not right after they finished the class is is after they'd been out for a few years, we asked them what did you find useful later after you've been in industry for a while? So maybe I should have said that clearly later or earlier rather. Alright, so in my professional career, I found much of my time is spent reading new code and figuring out how to implement new features that my org needs. So when you get new industry, your boss is not going to say, Hey, we need you to do this thing, start fresh program. Like it was in 220. I must say, Hey, we need you to do this thing. Here's the 5 million lines of code we've written already, fit it in. Okay. And you'll have other people that helped her write some of those 5 million lines. But they're not going to spend their entire day sitting and walking you through the code. It. So they're going to help you figure out where you should be filling things in. They might tell you, Well, you should start here, start looking here. But largely it's gonna be on you to go figure out how the whole thing works. Find the place to insert the new functionality and do your work and get it all to work together. In my job today, I don't have the luxury. Here's what he called himself. Eric Carle house bedroom as Eric Badger actually. But in my job today, I don't have the luxury of The answer is being figured out. There are no instructions, no hands, TA office hours, no nothing. That's most of the real-world, right? If you if you go to a good company, you will have a mentor at that company. I mean, I'll tell you now, would tell this to all my advisees. Not all tie tech companies do that very well. Most of figured it out by now. Some you've heard of we're really bad at it five years ago. So you will have a mentor, but largely you're kinda on your own. The internship, of course they're gonna give you more mentorship, right? Because they're trying to attract you also. But when you get there, you're largely on your own and most companies succeed, you need to be able to deal with that, right? You need to succeed by going off and finding stuff on your own and learning and doing how to write good code and why we need to do so. So hopefully this will encourage you as you work with a team to write code that your teammates enjoy reading, right? I mean, I say that when I teach one twenty two, twenty mostly to 20. But it might be hard to understand until it really, your teammates are reading it, right? And they're saying, Oh, I really understood it. After I read your code, then you feel good. They say, I don't get it at all. Like what's wrong with you? I did it right? So this will help you learn. If you understand the fundamental physics, you will never be surprised when something you can understand or learn. So this is, you want to understand what's going on in the system, then you'll be able to understand how to use it. Okay, so there's a class in CS where they teach you how to use POSIX interfaces to operating systems. We teach you how to build an operating system. Because we think if you can build an operating system, you'll know how to use it. 391 helped me teach me how to approach and solve system level problems. So similar similar comment. I've had cases where people asked me, How did you find that bug? When the answer was simply open the debugger and step through the code. This is not the only person who has said this to me. I said this was to another faculty but has said something similar to me. Also go to an internship and I like how he got this terrible problem. We don't know what to do. You sit down, you open the debugger, you say, well the problem is here. It looks like you de-reference null. Let's just fix that. And then it works. So you go through how many of you have done internships out of Illinois? Like not in Research Park but somewhere else. Okay. So in my experience, those of you who raised your hands and most of the room didn't write. But those of you who've raised your hands have had the opportunity to see students from other schools and say, Wow, I really learned a lot at Illinois. Okay. I feel you will have that opportunity, especially after 391 when you go into an internship off-campus and you see students from other schools that don't know how to use a debugger, that don't know how to do a test. Okay? So hopefully you'll make use of this. Then groups coding projects within a group, how to collaborate with group members. Every company. Heroic software efforts ended in the nineties. I mean, there are a few games out there that are indie studios usually that means five or ten people. Maybe even a couple of games you like to play once in a while. That's really one person, but it's not like it's groundbreaking. Groundbreaking stuff like the Windows NT kernel that happened, Dave Cutler and I think it was released in 93. I think. I'm remembering correctly. Sorry, I should look that up again. But the one that was really that was really groundbreaking was actually, have any of you heard of Wolfenstein 3D? Okay, So a few of you maybe even played it. I was sitting there writing 3D games for fun on my, on my machine and I couldn't get them to be fast. Right. I just like the kinda slow. It looks great. But I couldn't get it at the speed and wanted sort of real-time 3D. And then they came out with that. And it turned out they did it by using self modifying code, which is cheating. Alright. That was the last heroic effort, right? One person wrote the code basically for that. Usually you've got a team of people you need to work in a team and in industry when you're adding software, even if you're in a startup, you're gonna have a team, right? 34 people maybe, but it's a team. You need those skills. Alright. So let's talk about the pieces of the class. Briefly. Got lecture. We'll talk about concepts, we'll talk about some of the practical side. We'll do a little bit of case study with Linux discussion. We'll talk, you go in, your TAs will help you with the concepts, talk about the labs as well, talk about common problems. I'll give you tips as also when I lecture things to think about things to avoid. Just general rules of how to approach the problems. Please listen. I'll try to motivate them by telling you all the sad stories for people who didn't. But, but there's always people who didn't want to listen. So these are both going to be recorded to MediaSpace. So afterwards you can go grab them. You can go look at them again. You can draw pictures on our faces if you'd like. I don't know what MediaSpace let you do, but, but you can get the recorded videos. So if you miss a class, don't worry too much. Do try to come to class. We'd like it to be interactive. Ask questions. But don't worry too much if you miss one because we're going to record them. We also have old recordings of the discussion sections. Not all discussion sections will be recorded, just the lecture and then maybe one discussion. We've got pre-labs. These are going to alternate. There's actually two pre-labs and four assignments for MPs. So this will help you get ready for the labs. I'll tell you more about the first one later. So the labs are machine problems are MPs. This is where you're going to actually learn your skills. So hands-on experience, real tools, real systems. Then we've got some exams because of course we have to have exams. They're mostly non-cumulative. So the second exam is mostly what you've done since the first exam, okay? Now it does build up a little bit, right? So don't expect it to not rely on any concept or term or something, but mostly non-cumulative. There's gonna be some emphasis on the lab material. So if you've done a good job and understood what you did in the lab part of the exam you'll just find easy. And some emphasis on the conceptual material will give you guides and previous exams on the webpage so you can see what it's like. It a company will always runs a good study session for us. So it's a lot of resources. So cost materials, we've got course notes which are kinda terse and to the point. And then we've got a whole bunch of reference materials. So any one of these is more detailed than you need. You might enjoy reading them. Some of them pretty easy to read, others. You don't want to sit down with the Intel technical manuals unless you're trying to put yourself to sleep. But there's some good books in here and tell you about how the kernel works. And you've got the code. So you can play with the kernel code if you really want to dive in. We won't, we won't require you to do too much of that. Butt. A couple of places where you will need to fit your code into the kernel. And then of course, you can write your own kernel. So it's good to understand how Linux works so that you can build your own. Okay? Alright, so some of those resources you can also find on the webpage. And some of those books are free online and get a PDF. You can print it if you want it. Where do you ask questions? Where do you have discussions? First place, go to Piazza. So here is the link that will take you to Piazza and let you sign up. There we will post announcements, errata, discussion of assignments, questions about what's going on. Please try to read it every day. Anything that isn't personal you should post here. Okay. In fact, anything that isn't something that you don't want our TAs and or CAs to see, you should post here and you can use private mode if you don't want other students to see it. If you put it private, only the staff will see it. If somehow you have a concern that you don't want CAs to see it, of course, assistance. Then maybe bottom line, you could send us e-mail, but that should almost be never hopefully never. One of the reasons for you is that we've got 50 ish people who will be looking at this, right? So if you want a fast response, if you put it here, you're gonna get a faster response. If you send me an email, it's probably going to take at least a day before I look. Okay, so so post things here. Don't post your code. If you're doing it private. I mean, sometimes people put code up and that's okay. Make sure you mark it private because if you're posting your answers, It's academic integrity violation. So we have to be a little careful with that. So please just try not to do it would be better. Don't repeat questions, right? So we expect you to kinda look in when someone has already asked a question and been answered. Well, you should know the answer because it's there for you to see. Alright? So make sure you've done your work before going and asking Piazza is not infinitely fast, right? We see a lot of questions, particularly at the start of class, where with three seconds of typing you get your answer. Does it, what happens when I do this? Go to the computer, type it. There you go. Three seconds later you have your answer. Alright? So we're going to encourage you not to ask those questions, right? Questions you can answer yourself in a few seconds. We'll encourage you to do that yourself. Check the web page for things that change rarely. So here's our webpage. I added a short URL for those of us like me who are lazy to type. So Gaudet illinois.edu slash ECE, threonine one will take you here. If you can't remember this, That's okay. I mean, I think most of us use the Granger pages anyway, but emails last resort, right? Workload and grading. So for programming assignments, one is kind of trivial and just setting up your environment to with a pre-lab, one of them takes half a semester, so they're not balanced, not equal weight. Two midterms and a final. That's it. So grading works like this. We've got 50% of your grade on labs. It's a lot of skills, a lot of knowledge, a lot of work that's reflected in the grading and all that work you've put in as half your grade. So setting up your environment, that's pretty easy, that's five per cent. And P1 is assembly coding goes into the kernel after you've tested it and user space. Let's see. So this one is a Missile Command game. Yeah, that's right. This one is a photo adventure game. This is mp to 5 thousand lines of code. Read it, you write another 510% also. This is your teams OS. Twenty-five percent. The pre-labs with MP 12 or 10% of the lab grades. So 1% overall. The tests, 15% each. And then we have 5% leftover. So usually you just get that, but you say, well, wait a minute. What about discussion section? What if I don't go? Well, then you don't go? So the discussion sections were created because students in the class said they wanted to have some time to sit down with the TAs and talk about things and listened and get some more information. So we're not going to make you go, right? But we really strongly encourage you to go because it's designed to help you. The information you TA will give you, we'll help you. So we strongly encourage you to go. I know you had to sign up for one and that's the way banner works. Go to whichever one you want, you want to go to, to go to two. You want to watch the video? Watch the video. I would encourage you to go because then you get a question, right? Talk to your TA and encourage you to try to go to the same ones every week for a couple of reasons. One, you get to know some of the TAs, they will know who you are, right? They'll get to know you. You get to know them, and that's better. Pick the ones you like. It's fine. We do have fire marshal rules. The classrooms have some space, so they're not filled, but please don't create fire hazards. There are serious safety issues. So if you go into some hour that you think you're going to try and the room is overflowing, please pick a different our certainly if it's the hour you signed up for, you should feel like you have the right to be there. But just don't don't create safety issues, please. Okay. Exams. When are the exam? Exams or in the evening? We have three. We won't have class these two days. We only have two midterms. Remember, this is our final, this is, this is assigned to us by the campus, as you probably know by now. Our exams are two hours, are designed to be fishable and less time. Okay. So we're trying to give you extra time because we don't want you to feel rushed. Okay? So that's the strategy. These are class days, but obviously not during the class hour. If you have any conflict, please let us know as soon as possible. At least a week before the exam so we can figure out what to do. So if you don't tell us a week before the exam, we might not be able to do anything. But if you can tell us today, we'll grade posted, post it up on Piazza. Now we'll make a note and we'll figure it out. Alright, so I'm sure you see this in every class. It's never a popular topic. Actually, I'm not really gonna get into the academic integrity on this slide, but we've got to talk about that briefly. Let me tell you that the things that's okay to do, it's okay to talk to any of the staff at anytime. During exams, even you say, Hey, I got a question, right? I mean, we might say read, read the problem zone. We might say, Aha, you pointed out some ambiguity. We're going to have to do an errata announcement. Okay. It's okay to ask. It's okay to talk to us, talk to Professor Kotler, chicken myself, talk to the TAs, talk to the CAs anytime you want. Pre-labs are also completely open. We do require you to actually work with a group of four or more, okay, So these are the things that could go off and find information. Now partly I created this policy because I said, look, your juniors now, your ECE students, you're all smart. You know that if you really want to damage yourself, what you do is you play League of Legends all night and then you call your friend, hey, you do the three menu, one pre-lab. Oh, yeah. Can you put my name on there? Don't screw yourself, please. The students liked to have fun with this. So routinely we get like a group, they're trying to break the record. We've had groups of what, 75. I don't care if you want to group into 250. That's cool. We grade one thing, we're done, right? Um, if you do that, make sure each of you solves the problem and balances at around with some of the people in that huge group. So you really understand it that way when you get into the lab, when you get into the exam, you feel like I know this stuff. If some of the other people in my seventy-five percent or 250 person group don't. Well, then the class average goes down, but I'm okay. Alright, so do turn in one copy with all your names and net IDs when you do your pre-labs. If you put your name on more than one, we're going to take the minimum. So make sure you know who your group is, right? Communicate. Alright? Um, collaboration is not allowed on the NPS. Nps 012 are individual work, okay, zeros, just setting up your environment. Mp3 is done with a team of four. So you're loved to talk to your teammates anytime about anything. I mean, not during the exams. It's not part of the MP MP 012. You're not allowed to share code, etc, will give you more specific examples. But their individual work. So it's okay to talk about ideas and strategies and things like that. Tests, of course, are all by yourself. You can call someone and say, Hey, I got a question during the exam, alright? Um, so any unauthorized provision or use of code not written by you or by your partners for MP3s, violation of academic integrity. Such violations at a minimum 0 on the assignment loss of a full letter grade, and we'll put it into the college through fair. So it's possible if you've got to develop a history, they might expel you. Obviously, we don't want any of this to happen. Hopefully you don't want any of this to happen. Don't stress too much. Graves or if you do this, gets stressed, but don't do this. And then we'll all be happy. Additional violations in our class. You'll fail the class if you do something a second time. Alright? Never popular topic. Let me give you examples just to make it crystalline. If you turn in a portion, a small portion even don't use other people's code. Whether it's from a current student, a former student and GitHub repo co-pilot session and get a cota payment or anything else. I don't care. We will give you a 0 and get the full letter grade. Same thing. Notice, somehow we've always got some students who like grabbing things off GitHub and they're sort of somehow think we can't see GitHub. We can see get hub to. In fact, we have everyone who has ever gone through the class. We have the code they turned in. So we don't really need to look on GitHub. And then we can compare them all by computers. So we're not doing like 20 thousand pairwise comparisons with your code for each of you. We just have a computer crunch through and it says, Oh, this looks suspicious and we look at it and say yep, okay. So please just don't do it, right? It's really easy to catch. And it's unfortunate for everyone we don't enjoy spending time on it and no one enjoys having happened. If you're giving short term, it might seem like a when you make your friend happy, long-term you're screwing yourself because you've lowered the value of degree. You're hurting your friend because they don't have the confidence which they could have had by doing their best in the class. So if you give anything, you make your solution code available to a current student by printing it, posting it to get hub sending by email or any other means putting a copy thrown in the garbage, have them pull it out, whatever. Don't do that. Okay. Using another's code, sometimes people tell us they just meant to take their friends code and look at it as a template? No, don't do it. Don't take the code. Talk about it. Sure don't take the code. Okay. Alright. Unpleasant topics. So let's move on. In MP3. In the second half of semester, I've mentioned several times, but it gives you more detail. You will write your own operating system with a team of four people. Sometimes people say, we've got a team of three. We say, Great, find a fourth. We've got a team of five. Figure out who's not gonna be on your team. We will take you if you don't have a team of four, we will we will assign you a team of four. So before the middle of the semester, find a team of four, things happen, right? If someone doesn't do well on the midterm, but somehow they decided to drop. What do we do? We move people around a little bit through the first checkpoint. We will solve the problem. Don't worry if you tell us no, no. We want to stick with a team of three, will consider that we don't guarantee will let you have a team of three, but we often end up with a couple of teams of three. But we're not going to allow you to say we want a team of three. Now, we're gonna give you a fourth person. So if you don't tell us, we will tell you from the hyper motivated. I have a design competition sponsored by Microsoft for the last 16 years. Okay, So here's a photo of me and Mike Bailey and a team that won the design competition three years ago. I think I took this one from fall 19. So what I always tell every student who asks me and I will tell you now, just in case you've never heard it, is you should think now about which of these three categories you fall into. And I don't want you to think I'm going to judge you. There are a lot of people. It's like, Hey, I want to go into industry and get a great job and make a huge salary. That's why I want to do and I'm ready for that. I'm tired of going to classes. It's perfectly reasonable. You need to pass the class, then you can do that. So it's a reasonable thing to do. Many of you will say, I want to get an a and I like A's. I've got lots of A's. I want to ask another reasonable thing to do. Some of you will say, I want to win and show them, me and my teammates are the best computer engineers on the planet. That's fine too. What does it work so well is if you get someone from the first category, grouping with someone from the last category and you know, after the midterm. And one person says, hey, let's go on to Murphy's. I was thinking of hitting into the lab. You're going to get friction. So figure out what category you're in. And try to find teammates who feel the same way, right? Find a team that sort of if you're out to when you want all of your teammates contributing, you're going to need that. There was a lot of competition. It's fun. If you want to get A's, that's okay. There's certain things you have to do to get all the points. So you want a good grade on your MP. You don't have to do all that extra stuff that all of the competing teams are going to at least try to do. We can show you some examples. You just need to finish it. Get an egg and all the points you could pass the class. You didn't even need to do that. At some point you say, Look, we're all gonna get good enough grade, we're going to pass. We're gonna get a B or whatever you're shooting for. So maybe you just take off time and go spend it enjoying bingeing. And my wife's watching Grey's Anatomy because like Grey's Anatomy, I don't know, she likes it. Something, write something you enjoy playing League of Legends, right? Alright. So it's good to have teammates with the same answers, okay? All right, At this point we're about 45 minutes in. So what I'm gonna do is pompous up here. We're going to have a little break. So here's some administrative area. So we're going to stop for five minutes. You can get up, You can stretch and have a drink of water, talk to your friends, make some new friends for your team, will take five-minutes and we'll come back and talk about administrative stuff. Alright, Thanks. Gents, if you want. You can also ask questions if you want it. Alright, ready to start again. So I think these are relatively popular, but I always want to make sure you've you've had classes. Do you understand why the heck are we having a break in the middle of class? So why do we have a break? What's the point of that, right? So the point of having a break is because it's really, really hard to sit there and listen for 90 minutes or 5075 minutes. I'm supposed to talk for. So instead of having one long monologue on everything under the sun, we try to put a break in the middle. But I have a lot to say. Do I really want to give a five-minutes of lecture? No, not really. Ece classes always end ten minutes before the hour for an hour-and-a-half class everywhere else on campus this 15, but not here. So what will be done at 320? And I will try to keep myself honest. And in return, please don't start fidgeting at 315, right. So I'll try to finish up on time and in return you because we'll have this break. You stay put and listened until 320. Okay. Alright. So after the break we will always be doing administrative yet. So upcoming due dates by next Wednesday, you gotta go to office hours and demo your MP. That's done in the lab. Okay. So we'll have, we're going to meet all the staff tonight. We're gonna put office hours up and hopefully tonight, maybe tomorrow, you'll be able to find plenty of time. And we've got almost 50 staff for you to go into the lab and show them that you've finished on p 0. But before you do that, you gotta finish np 0, okay, so you can set up your home environment. I knew even before we really had it ready. A bunch of you have been trying to do that. Sorry that it wasn't ready. But you do need to set up your lab environment because we're going to use the lab. We're not using your machine to do demos, we're going to use the lab machines so you need to make sure that your code works in the lab. So you need your lab environment and MPC is just setting it up, right? It should take you two hours or less. And then once you have that done, you can easily move on to test your code in the lab. You can develop. It's still on your own machine, but we're not officially supporting that, but we have been using it particularly during the pandemic anyway, and it's really been around for a while. So you can do things on your home machine, just make sure they worked in the lab because that's where it will run them. When you demo, all the demos will be in the lab. We're changing the format so it's not gonna be as crowded. I mean, I'm not going to tell you wear a mask or don't, but when you're in a crowded environment, I guess I would suggest you should consider wearing a mask because the lab may be kinda crowded. So think about it, right? Even if you think you don't normally want to wear a mask, I'm worried in demos it's going to get kinda crowded. If it gets too crowded, we might back off and do something else. But, but consider that and encourage our staff to consider it also. And I'm not telling you you have to. I'm just saying in crowded environments, you might want to err on the side of safety. Alright, so office hours check the webpage for the schedule should be up end of today. Hopefully, they're always gonna be in the class lab, which is not this room. A typo 3026. Okay. So the class lab is 30263081 is where I teach my other class that I'm teaching this semester and has nothing to do with us. Hello, you may have other classes in there as well. Alright, 3026. So all of the office hours will be there. Your demos will be done by the TAs and the CAs. I mean, I have office hours. I'm going to hold them in the lab because I don't really know how to use computers. Don't turn it into me. Okay. I mean, I'm kidding with that statement mostly, but, um, but I won't be part of that grading infrastructure, right. So so don't don't plan to do your demo it to me. I used to alternate. I mean, normally if I'm not teaching 391 and go sit and daily, buy it for my office hours, so we'll see how it goes. If I'm getting a lot of questions, even during the off weeks when there's no deadline and 391, I may decide to go sit in daily byte instead. I just think with between our class and the other class, it's gonna be confusing and hard for people to remember where to find me. So for now I'm going to say I'll always be in the lab for my office hours and that's Thursday after class for two hours. Okay. So that was it for administrative via Let's go back here. Alright. So let's talk about the environment. No, no, no, not that environment. That's glaciers melting in the Alps. Not that environment. The class environment. That's what we should talk about. Alright, so it's kinda natural to be intimidated by OS work. I mean, I remember feeling a little worried when I was playing with stuff long, long time ago and when I was in college back when we'd hunt pterodactyls for fun. What happens if you mess up, right? I mean, you know, you did something wrong, you could lose all your homework. Or worse, you could lose all your music, right? Or you might have to buy a new computer. Can be bad. Actually, when I was a kid, they told us, don't worry, there's nothing you can do that it'll hurt the computer. I know software you can write that'll hurt the computer. Turned out they were lying. I did manage to destroy computer, but not quite that way. I almost destroyed my own butter as quick to turn the power off, and that was good enough. Alright, so we can't let you work on the lab machines though because, I mean, look at that. What if you did that to our lab machines? So you'd have laptops? I'm sure you'll be careful. Alright. How many of you written a simulator? Just out of curiosity. I mean, this used to be like half of our students coming into 391 because I had done a project in the predecessor for two twenty one ninety class where you wrote in LC3 simulator as one of your codes and has about a thousand lines or so, um, so about half of our students did that. And then they came into 391 and the other did, did an assembler itself. So how many of you have written any kind of simulator? It's not really that hard. Okay, a couple of people in the back and front. Good. So in the 1960s, ibm developed a solution to this problem I was showing you. And so they said, Well, we want to work on the OS, but people want to use the computers. And back then there were three computers. Maybe not, maybe not three, but not very many. And so they really couldn't afford to use some of those computers to do OS work at the time. So what they did is they created a fancy simulator and they call it a virtual machine. How many of you use virtual machines before? Okay, Good. That's what we're going to use. Alright, I'll show you more detail in a few slides, are a couple of slides. We're going to use a virtual machine. What it is, it's a program, it's a simulator. Right now. It's a simulator that actually takes most of your code and executes it the instructions natively on the architecture. So it's taking your code and running most of it natively. And then when you try to do something like use the device, it stops and it says, Oh, you're not allowed to do that. So let's emulate that. Let's simulate that part. That's how virtual machine works in practice, typically, some of them actually cross-compile, right? So some of the ones even in this class have done a cross architecture. So you have one assay for your program, different ISA for your real processor. You have to cross-compile for your code or just simulate the whole thing. But that slope here is, let me get my pointer. This is what our classroom environment looks like. So let me explain some of these boxes. So what you have here, this is the Ethernet in our building. So the wired network and our building inside the lab. This is one of the machines you might sit at, a Windows lab machine, okay. Inside there is a program called QEMU, that's the virtual machine. That's actually the program. So each of these is really virtual machines. So you can launch many virtual machines. All of them are basically just copies of q Mu and they can talk to each other over a network that QM you simulate. And it makes it look like a real network. And then it also connects to the network card on that Windows lab machine. So you've got what's called Network Address Translation. Your test machine or your development machine can talk to one another over the network. And you can also talk to machines outside the network. So people were asking me the break, what kind of things could we do for the competition? People have done networking layers inside the OS. So you could talk across machines in the lab or even to the outside world, do web page rendering. It takes a lot of effort. As I said, competitive. Alright, so you've got your testing machine and your development machine. So you're gonna write code inside the Linux kernel and run it on your development, I'm sorry, in your test machine. And you'll develop it here and then you'll execute it over on your test machine. You run gdb on your development machine that will connect over that TCP connection to your test machine, which is where you're testing your kernel or an early RMP is testing your kernel code or your user level code. Okay? Now what about all this file system stuff? So the way this works, notice this local disk has these two dot Q cal file. So what that is is a virtual hard drive. There's something, I don't know if 48 gigabyte virtual hard drive, most of that data is replicated on every machine in the lab, as well as every machine in 3022, which is the AWS lab, two doors down. So if the labs bursting with people go two doors down, you can use those machines to, you can also use the undergrad lounge. Lot more competition there. And I think other people will get mad if we start forcing them out. So all of these cute cows are replicated on all of those machines, you say, but not all of our discs look the same, right? Where's my changes? Where's my local code that I've put onto this virtual drive? Well, that lives in these delta files, these undo disks as they're called. That's the difference between your version and the original version that lives in the AWS storage system in your personal storage. So when you get up and go to a different machine, right, then it's there for you Also, by going across the network to the AWS servers. And the way it puts it together, it's got to have a local copy. This is why you can go into DCL or Grainger or things like that. They don't have this local copy. Okay. Alright, that was a little fast if you've never played with this stuff before. But we will, we will go over it again in discussion section tomorrow, and we'll also be using it in NP. So if you, if you want to ask more about it, I guess you can do so now or you can do so in discussion or you can think about it. Question, excuse me, any questions? To queue, going to copy over. There are two ways to use your own machine. One, you live in an Illinois domain. You work in a dorm room, you do a VPN. And in that case, you can just put a copy of this on your machine, pretended to lab machine connected over the network to the AWS storage server. And it looks identical to that machine. If you don't want to do VPN. If you want to be on an airplane, for example, um, then it doesn't look like this quite right. Your, your stuff doesn't go back to here because you're not connected to the storage server. So instead it lives on your local disk. And the way to solve that is we use github, git lab, and illinois edu for all of your sources. So when you're done getting it working on your local machine, you simply check it in and then go to lab machine or you turn on VPN, although I think you'd have to separate those. And then you download it, right by pulling your code. Yeah. So it's pretty easy regardless, but it's up to you whether you want to do VPN mode or not, depending how you want to interact. Yeah, good question. Alright. Any others? Alright. Alright, so set up your personal environment. This is in P 0. It will look like the one I just showed you. It's due in any TA or CAs office hours by next Wednesday. And he didn't do that demo in-person during the office hours in 3026 CCB. Okay. Then we talked briefly about working on your own machines. There's the setup, this is the no VPN. There's also one if you'd like to use VPN, is a different page. So that'll help you develop intestine P code. Again, technically we're not supporting this, but we always sort of support it. So we can guarantee it's going to work on your machine. Bottom-line will try to help you. And you can post on Piazza. And the TAs are really good at debugging it because we've had thousands and thousands of students use it. So I won't complain about apple. I'll wait till I'm not being recorded. I don't know why, but alright. So there will be contention for library sources. We have 44 or 45 machines available to you. There are 250 of you. If you-all wait till the deadline. Guess what? There's about six students, maybe 5.5 students per machine. So don't wait for the deadlines. For MP 0. You can put a lock on your lab computer up to four hours. We don't expect that much contention because it shouldn't take you more than a couple hours to do it. But you can leave them lab machine locked. You have to leave a note saying, you know, this is where I'm going and when I'm coming back. After MPC not allowed to lock for more than 30 minutes. So at some point someone's going to push the power button, okay? People are waiting to use machines. So these are our roles. When someone wants to do a hand in, they get precedence. It's preemptive, right? So if there's someone waiting to turn in their MP, or you're waiting to turn your MP. And someone else is trying to debug so they can turn in their NP tomorrow. You get precedence. Alright? So normally our demos will be after there's a coating deadline on Monday night at six. And then we start doing demos at six and everyone gets a code done by Monday, but you can spread yourselves out Monday, Tuesday, Wednesday for the demo. The codes all the same code deadlines, all the same for everyone. But then the demos we spread out so that we don't overcrowd the lab and take forever. Alright. We do encourage you to work from home. Demos must happen on the lab machines. So you will not demo from your machine, would demo in the lab. In fact, with later MPs were not even going to use your login. The TA or CA will pull your code from git, and that's the code that you turned in. So whatever you turn in, make sure it compiles. I mean, you should have learned this in 220, right? If your code doesn't compile or doesn't assemble, and that's 0. Just like I mean, that's what I do when I'm in to 20. I mean, that should not be hard. Please don't wait till the last minute. Because if you wait till the last minute and then you go scramble to write some comments and you forget to like make sure you didn't do something silly. Going to really be a moment of unhappiness, moment of learning maybe, but don't do that. Please. Please be respectful to others. The windows, I think one TA already set it on Piazza. They don't open in the lab. You're not supposed to have food in there. We know you're in there a lot, but try not to spill drinks or food on the keyboards, right? If the trash is getting full, maybe take it down. Take it down to the next trash instead of overflowing and onto the floor and then be kind to your fellows because everyone has to share the lab. Okay. Alright, so the last thing I have today, I mean, it could start on assembly. I have two more minutes to many more minutes. So this is just some advice from a former TAs on how to approach the class. Other people who have done well with the class. I said, Okay, I think anyone can be a grind. But it's actually worth learning because it's difficult stuff, right? So I mentioned all of this material was things that all of the CTE faculty back when it was designed, thought, these are things that we want our students to know when they go out the door to grad school, go out the door to industry, whatever. These are things they should know, they should know how to do. It is important to material. It takes time to learn it, right? It's deliberately done in a way that it's not the usual 3.5 hours per credit hour if an ECE class, right? It's it's more than that for the average student. Okay. So that's deliberate. But almost everyone who has gone through it at the end, you're going to do something that pretty much no one in any program in any other school does it at least required, which is build your own operating system. So you're gonna be proud. I hope you shouldn't be proud of yourselves. And it doesn't matter whether you got an a or B or C. You get it done. Mostly get it done, right. You should be proud of yourself is a lot of work. So hopefully you enjoy that and you enjoy learning the material and you get the grade, you're happy with whatever that is. It doesn't matter to me, right? I just want you to get a grade you're happy with? Not that anyway. You understand what I mean? Hopefully, it is an important class. You don't have to be a genius to do well. It takes time to learn. It takes effort to learn it, but you don't have to be super smart to understand all this stuff and learn it. This is coming not from me but from the TAs. Alright? So my advice is this is another TA. Read the documentation carefully. So often the documents are big. There's a lot of text. It because there's a lot in a real specification for what you need to do. Okay, So most of the answers to most of the questions are already in the documents. When people come up with new questions, we go back and change the documents. The documents have been around for a while now. So most of the the answer is already there. Right. But you have to read it. Okay. So please take the time to go through and read the documents and you'll find things easier. Go to discussion. As I said, we're not going to check on you. It's another thing. We've put it there to help you. So please take advantage of it. If you think it's useful to you to go to, to go to to be careful don't overflow the rooms. Go to office hours and I'll try to ask questions during class, right? Good questions. There are a bunch of good questions during break. Would have been better and then I'm happy you asked them would have been even better if you raise your hands so that the other 250 people could hear them, right? So I often say this, so sorry if you've heard me in some other form, tell students this. But if you have a question, chances are good. Like two-thirds of the room has the same question. They're just sitting there thinking, I hope someone else asks. So if you raise your hand and I'll probably know your name by the end of the semester. Whereas adding in all my students before now, I've got to about 4 thousand. So now I have another 270 this semester. I'm okay at remembering names, but, you know, that's 4 thousand people. So standout, ask questions. Enjoy the interaction. Hopefully. Try to make sure you understand why we're doing things, right. Most of the things we asked you to do have a reason. So feel free to ask why. Most of it is motivated by, we're trying to help you learn a particular skill or get some knowledge that we think is useful to you. So feel free to ask, why are we doing this, right? Tried to provide that motivation, but make sure you understand it. And I would apply that also. You know, you're at the stage. Either you've already started, are you going to start thinking about research? If you start doing research, you should really be asking the professor, what's the point of this? What does this affect? What do we get if we solve this problem? Now, what do we get, but how does it, how does it help the world? How does that help us? How does it help the research community? What, what's the point of solving this problem? What knowledge do we get, right? It doesn't have to be, some, doesn't even have to be a practical benefit. It could just be we want to know the answer. This an important question that people wonder about. Okay? Alright, make use of office hours. We've got 50 people ish, right? So a lot of time. You want to be comfortable with your debugging environment. You will be using it a lot. Tryout pair programming, trial code reading, once you get into the MP3 or for your pre-labs, will be some coding and the pre-labs too. So try those out, they're useful. It will help you teamwork, breaking things down, testing early and often. I mean, I think this has gotten better, but I just remember seeing so many students in the intro classes. We ask them to write something that takes a few 100 lines of code. And somehow they write all of those lines of code and then they compile it. And lo and behold as 6 thousand error messages for 300 lines of code. That like what do I do? I can't scroll up that high. Just don't do that. Write some code and make sure it works. Write some more code, make sure it works, write some more code. Get in the habit of testing things as you go along and thinking about how you can test them as you develop them. Okay? Alright, Then this one is similar. That's why jammed them all into the same slide. Start early, start early. It takes longer than you think a time management plan ahead. These are not easy problems. There's only four MPs. Do not show up in the lab at four PM on Monday thinking, oh yeah, I got till six to turn in my code. I mean, you're only work for two hours, you're probably get close to 0, but I guess it's a way to save time. Maybe not the way most of you would want to save time at that point, you might as well not show up. They take time. So plan ahead. Make sure you've got time. When you get into the team, makes sure you communicate what your constraints are for meeting with your teammates. Also, be, be empathetic about other people's constraints, right? So some of you may have jobs. When I was a student, I worked actually three jobs at one time. I had things I had to do. I couldn't just meet randomly. So sometimes people have constraints and just because they're not responding to you right away on Slack or whatever discord you like to communicate with doesn't mean that they're just not participating. It could be that they've got real work to do and if their boss sees them playing with their phone, they'll get fired, right? So, you know, get to know your teammates, get to know what the constraints are, find a way to work together that's effective and gets things done on time. Think about breaking tasks. Alright, so I think that's about it for the slides. Yeah, we're all done for today. So any other questions before we break? Alright. Go ahead and come on down if you want to ask something, Thanks.
